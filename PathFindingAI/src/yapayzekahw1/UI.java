/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package yapayzekahw1;

import heap.MinHeapAStar;
import heap.MinHeapBFS;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.showMessageDialog;
import models.Pixel;
import timer.Timer;

/**
 *
 * @author civankorkmaz
 */
public class UI extends javax.swing.JFrame {

    BufferedImage img;
    Image newImage;
    String imagePath;

    int start_x;
    int start_y;
    int end_x;
    int end_y;

    int image_width;
    int image_height;

    /**
     * Creates new form UI
     */
    public UI() {
        initComponents();

        File directory = new File("");
//        jTextField1.setText(directory.getAbsolutePath());
        jTextField1.setText("/Users/civankorkmaz/Desktop/test.png");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1100, 720));
        setPreferredSize(new java.awt.Dimension(1100, 720));

        jTextField1.setText("Enter path here");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/src/folder2.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setMaximumSize(new java.awt.Dimension(1000, 1000));
        jLabel1.setMinimumSize(new java.awt.Dimension(1000, 1000));
        jLabel1.setPreferredSize(new java.awt.Dimension(1000, 1000));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BFS Array", "BFS Heap", "A* Array", "A* Heap" }));

        jButton6.setText("START");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("SAVE");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel2.setText("Image Path:");

        jButton8.setText("SHOW IMAGE");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "START", "END" }));

        jLabel3.setText("Start X:");

        jLabel4.setText("Start Y:");

        jLabel5.setText("    ");

        jLabel6.setText("    ");

        jLabel7.setText("End X:");

        jLabel8.setText("End Y:");

        jLabel9.setText("    ");

        jLabel10.setText("    ");

        jLabel11.setText("Show Passed Pixels:");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "OFF", "ON" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 551, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton8)
                .addGap(86, 86, 86))
            .addGroup(layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel8))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7)))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton7)
                        .addComponent(jButton6)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11)
                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8)
                            .addComponent(jLabel10))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(120, 120, 120))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            imagePath = selectedFile.getAbsolutePath();
            jTextField1.setText(imagePath);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        int x = evt.getX();
        int y = evt.getY();

        int selectedOption = jComboBox2.getSelectedIndex();
        switch (selectedOption) {
            case 0:
                start_x = x * img.getWidth() / jLabel1.getWidth();
                start_y = y * img.getHeight() / jLabel1.getHeight();
                jLabel5.setText(start_x + "");
                jLabel6.setText(start_y + "");

                break;
            case 1:
                end_x = x * img.getWidth() / jLabel1.getWidth();
                end_y = y * img.getHeight() / jLabel1.getHeight();
                jLabel9.setText(end_x + "");
                jLabel10.setText(end_y + "");
                break;

        }
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
            img = ImageIO.read(new File(jTextField1.getText()));
            image_width = img.getWidth();
            image_height = img.getHeight();
        } catch (IOException ex) {
            showMessageDialog(null, "File Not Found!");
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }

        int selectedOption = jComboBox1.getSelectedIndex();
        switch (selectedOption) {
            case 0:
                BestFirstSearchWithArray(new Pixel(start_x, start_y), new Pixel(end_x, end_y));
                break;
            case 1:
                BestFirstSearchWithMinHeap(new Pixel(start_x, start_y), new Pixel(end_x, end_y));
                break;
            case 2:
                AStarSearchWithArray(new Pixel(start_x, start_y), new Pixel(end_x, end_y));
                break;
            case 3:
                AStarSearchWithMinHeap(new Pixel(start_x, start_y), new Pixel(end_x, end_y));
                break;
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        try {
            img = ImageIO.read(new File(jTextField1.getText()));
            image_width = img.getWidth();
            image_height = img.getHeight();
            newImage = img.getScaledInstance(jLabel1.getWidth(), jLabel1.getHeight(), Image.SCALE_DEFAULT);
            ImageIcon icon = new ImageIcon(newImage);

            jLabel1.setIcon(icon);
        } catch (IOException ex) {
            showMessageDialog(null, "File Not Found!");
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        String directory;
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            directory = selectedFile.getAbsolutePath();
            try {

                String imagePath = jTextField1.getText().toString();
                System.out.println(imagePath);
                String fileseparator;
                if((File.separator.contains("/"))) {
                    fileseparator = "/";
                }
                else{
                    fileseparator = "\\\\";
                }

                String[] dummy2 = imagePath.split(fileseparator + "");
                String fileName = dummy2[dummy2.length - 1];

               
                int selectedOption = jComboBox1.getSelectedIndex();
                switch (selectedOption) {
                    case 0:
                        fileName = "bfs_array_"+fileName;
                        break;
                    case 1:
                        fileName = "bfs_heap_"+fileName;
                        break;
                    case 2:
                        fileName = "astar_array_"+fileName;
                        break;
                    case 3:
                        fileName = "astar_heap_"+fileName;
                        break;
                }

                directory = directory + File.separatorChar+fileName;

                System.out.println(directory);
                ImageIO.write(img, "png", new File(directory));

            } catch (IOException e) {
                showMessageDialog(null, "Image could not saved!");
            }
            showMessageDialog(null, "Image saved!");
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void drawPoint(int x, int y) {
        if (jComboBox3.getSelectedIndex() == 0) {
            return;
        }
        Color myWhite = new Color(0, 255, 0);
        int rgb = myWhite.getRGB();
        img.setRGB(x, y, rgb);
    }

    private void drawPoint(int x, int y, int r, int g, int b) {
        Color myWhite = new Color(r, g, b);
        int rgb = myWhite.getRGB();
        img.setRGB(x, y, rgb);
        jLabel1.repaint();
        ImageIcon icon = new ImageIcon(img);
        jLabel1.setIcon(icon);

    }

    private void drawFinalPath(Pixel start, Pixel end) {
        Pixel temp = end;
        while (!(temp.getX() == start.getX() && temp.getY() == start.getY())) {
            drawPoint(temp.getX(), temp.getY(), 0, 0, 255);
            temp = temp.getParent();
        }
        jLabel1.repaint();
        newImage = img.getScaledInstance(jLabel1.getWidth(), jLabel1.getHeight(), Image.SCALE_DEFAULT);

        ImageIcon icon = new ImageIcon(newImage);

        jLabel1.setIcon(icon);
    }

    private void writeImageToFile() {
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private void BestFirstSearchWithArray(Pixel start, Pixel end) {
        Timer time = new Timer();
        int maxSize = 0;
        time.setStartTime();
        ArrayList<Pixel> visitedPixels = new ArrayList<>();
        ArrayList<Pixel> priorQue = new ArrayList<>();
        priorQue.add(start);

        boolean visitedPixelss[][] = new boolean[image_width][image_height];

        while (!priorQue.isEmpty()) {
            Collections.sort(priorQue, new Comparator<Pixel>() {
                @Override
                public int compare(Pixel o1, Pixel o2) {
                    if (o1.getCloseness() > o2.getCloseness()) {
                        return 1;
                    } else if (o1.getCloseness() < o2.getCloseness()) {
                        return -1;
                    } else {
                        return 0;
                    }
                }
            }
            );
            Pixel temp = priorQue.get(0);
            if (priorQue.size() > maxSize) {
                maxSize = priorQue.size();
            }
            priorQue.remove(0);
            drawPoint(temp.getX(), temp.getY());

            for (int i = -1; i <= 1; i++) {
                for (int j = -1; j <= 1; j++) {
                    if (i == 0 && j == 0) {
                        continue;
                    }
                    int temp_x = temp.getX() + i;
                    int temp_y = temp.getY() + j;

                    if (temp_x < 0 || temp_y < 0 || temp_x >= image_width || temp_y >= image_height) {
                        continue;
                    }
                    if (!isVisitedArr(visitedPixelss, temp_x, temp_y)) {
                        Color color = new Color(img.getRGB(temp_x, temp_y));
                        Pixel tempPixel = new Pixel(temp_x, temp_y, color.getRed(), end, temp);

                        if (temp.getX() == end.getX() && temp.getY() == end.getY()) {
                            drawFinalPath(start, tempPixel);
                            time.setEndTime();
                            showMessageDialog(null, "Max stack size: " + maxSize + "\nDuration: " + time.getDuration() + " ms");
                            return;
                        }
                        visitedPixelss[temp_x][temp_y] = true;

                        priorQue.add(tempPixel);
                    }
                }
            }
        }

    }

    private void AStarSearchWithArray(Pixel start, Pixel end) {
        ArrayList<Pixel> visitedPixels = new ArrayList<>();
        ArrayList<Pixel> priorQue = new ArrayList<>();
        Timer time = new Timer();
        int maxSize = 0;
        time.setStartTime();
        priorQue.add(start);

        boolean visitedPixelss[][] = new boolean[image_width][image_height];

        while (!priorQue.isEmpty()) {
            Collections.sort(priorQue, new Comparator<Pixel>() {
                @Override
                public int compare(Pixel o1, Pixel o2) {
                    if (o1.getCost() > o2.getCost()) {
                        return 1;
                    } else if (o1.getCost() < o2.getCost()) {
                        return -1;
                    } else {
                        return 0;
                    }
                }
            }
            );
            Pixel temp = priorQue.get(0);
            if (priorQue.size() > maxSize) {
                maxSize = priorQue.size();
            }
            priorQue.remove(0);
            drawPoint(temp.getX(), temp.getY());

            for (int i = -1; i <= 1; i++) {
                for (int j = -1; j <= 1; j++) {
                    if (i == 0 && j == 0) {
                        continue;
                    }
                    int temp_x = temp.getX() + i;
                    int temp_y = temp.getY() + j;

                    if (temp_x < 0 || temp_y < 0 || temp_x >= image_width || temp_y >= image_height) {
                        continue;
                    }

                    if (!isVisitedArr(visitedPixelss, temp_x, temp_y)) {
                        Color color = new Color(img.getRGB(temp_x, temp_y));
                        Pixel tempPixel = new Pixel(temp_x, temp_y, color.getRed(), end, temp);
                        tempPixel.setCost(temp);

                        if (temp.getX() == end.getX() && temp.getY() == end.getY()) {
                            drawFinalPath(start, tempPixel);
                            time.setEndTime();
                            showMessageDialog(null, "Max stack size: " + maxSize + "\nDuration: " + time.getDuration() + " ms");
                            return;
                        }
                        visitedPixelss[temp_x][temp_y] = true;
                        priorQue.add(tempPixel);
                    }
                }
            }
        }

    }

    private void BestFirstSearchWithMinHeap(Pixel start, Pixel end) {
        Timer time = new Timer();
        int maxSize = 0;
        time.setStartTime();
        boolean visitedPixelss[][] = new boolean[image_width][image_height];
        MinHeapBFS minHeap = new MinHeapBFS();
        minHeap.insert(start);

        while (!minHeap.isEmpty()) {
            if (minHeap.getSize() > maxSize) {
                maxSize = minHeap.getSize();
            }
            Pixel temp = minHeap.extractMin();
            drawPoint(temp.getX(), temp.getY());

            for (int i = -1; i <= 1; i++) {
                for (int j = -1; j <= 1; j++) {
                    if (i == 0 && j == 0) {
                        continue;
                    }
                    int temp_x = temp.getX() + i;
                    int temp_y = temp.getY() + j;
                    if (temp_x < 0 || temp_y < 0 || temp_x >= image_width || temp_y >= image_height) {
                        continue;
                    }
                    if (!isVisitedArr(visitedPixelss, temp_x, temp_y)) {
                        Color color = new Color(img.getRGB(temp_x, temp_y));
                        Pixel tempPixel = new Pixel(temp_x, temp_y, color.getRed(), end, temp);

                        if (temp.getX() == end.getX() && temp.getY() == end.getY()) {
                            drawFinalPath(start, tempPixel);
                            time.setEndTime();
                            showMessageDialog(null, "Max stack size: " + maxSize + "\nDuration: " + time.getDuration() + " ms");
                            return;
                        }
                        visitedPixelss[temp_x][temp_y] = true;
                        minHeap.insert(tempPixel);
                    }
                }
            }
        }

    }

    private void AStarSearchWithMinHeap(Pixel start, Pixel end) {
        Timer time = new Timer();
        int maxSize = 0;
        time.setStartTime();
        boolean visitedPixelss[][] = new boolean[image_width][image_height];
        MinHeapAStar minHeap = new MinHeapAStar();
        minHeap.insert(start);

        while (!minHeap.isEmpty()) {
            if (minHeap.getSize() > maxSize) {
                maxSize = minHeap.getSize();
            }
            Pixel temp = minHeap.extractMin();
            drawPoint(temp.getX(), temp.getY());

            for (int i = -1; i <= 1; i++) {
                for (int j = -1; j <= 1; j++) {
                    if (i == 0 && j == 0) {
                        continue;
                    }
                    int temp_x = temp.getX() + i;
                    int temp_y = temp.getY() + j;

                    if (temp_x < 0 || temp_y < 0 || temp_x >= image_width || temp_y >= image_height) {
                        continue;
                    }

                    if (!isVisitedArr(visitedPixelss, temp_x, temp_y)) {
                        Color color = new Color(img.getRGB(temp_x, temp_y));
                        Pixel tempPixel = new Pixel(temp_x, temp_y, color.getRed(), end, temp);
                        tempPixel.setCost(temp);

                        if (temp.getX() == end.getX() && temp.getY() == end.getY()) {
                            drawFinalPath(start, tempPixel);
                            time.setEndTime();
                            showMessageDialog(null, "Max stack size: " + maxSize + "\nDuration: " + time.getDuration() + " ms");
                            return;
                        }

                        visitedPixelss[temp_x][temp_y] = true;
                        minHeap.insert(tempPixel);

                    }
                }
            }
        }

    }

    private boolean isVisited(ArrayList<Pixel> visitedPixels, int x, int y) {
        for (Pixel pixel : visitedPixels) {
            if (pixel.getX() == x && pixel.getY() == y) {
                return true;
            }
        }
        return false;
    }

    private boolean isVisitedArr(boolean visitedPixelss[][], int x, int y) {

        return visitedPixelss[x][y];

    }

    private void sortArrByCost(ArrayList<Pixel> visitedPixels) {
        int n = visitedPixels.size();
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (visitedPixels.get(j).getCost() > visitedPixels.get(j + 1).getCost()) {
                    // swap arr[j+1] and arr[i] 
                    Collections.swap(visitedPixels, j, j + 1);

                }
            }
        }
    }

    private void sortArr(ArrayList<Pixel> visitedPixels) {
        int n = visitedPixels.size();
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (visitedPixels.get(j).getCloseness() > visitedPixels.get(j + 1).getCloseness()) {
                    // swap arr[j+1] and arr[i] 
                    Collections.swap(visitedPixels, j, j + 1);

                }
            }
        }
    }

}
